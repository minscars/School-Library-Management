// <auto-generated />
using System;
using LibraryManagement.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Data.Migrations
{
    [DbContext(typeof(LibraryManagementDbContext))]
    [Migration("20240501152054_seed-data-userAccount")]
    partial class seeddatauserAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Data.Models.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = "A001",
                            Name = "Đặng Hoàng Giang"
                        },
                        new
                        {
                            Id = "A002",
                            Name = "Higashino Keigo"
                        },
                        new
                        {
                            Id = "A003",
                            Name = "Nguyễn Công Danh"
                        },
                        new
                        {
                            Id = "A004",
                            Name = "Trần Cao Đệ"
                        },
                        new
                        {
                            Id = "A005",
                            Name = "Huỳnh Xuân Hiệp"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(4938));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = "BF001",
                            Content = "Test",
                            Image = "Test",
                            Status = 0,
                            Title = "Test",
                            TopicId = "3A1C8B8E-33AB-4DB7-826F-D58C8DF82C88",
                            UserAccountId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(1906));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(2222));

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = "0E9B5F1B-0C7B-4093-9559-D3A7FE380832",
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "Tìm mình trong thế giới hậu tuổi thơ"
                        },
                        new
                        {
                            Id = "90B5054A-9A37-4249-B1A1-209FFC7AE80D",
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "Điều kỳ diệu của tiệm tạp hóa Namiya"
                        },
                        new
                        {
                            Id = "34824C95-72D2-4861-A552-75BAC6F9508F  ",
                            CategoryId = 2,
                            IsDeleted = false,
                            Name = "Rồi một ngày cuộc sống hóa hư vô"
                        },
                        new
                        {
                            Id = "AFE53773-D1B3-462D-B27E-8D37C1138639",
                            CategoryId = 1,
                            IsDeleted = false,
                            Name = "Quán ăn nơi góc hẻm"
                        },
                        new
                        {
                            Id = "A7A7CFF3-5B28-4921-9F06-599A3B14A776",
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "Thần số học"
                        },
                        new
                        {
                            Id = "4B189D0C-7BA7-4EC0-BDC0-089180AAF5FB",
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "Từ điển tiếng Việt"
                        },
                        new
                        {
                            Id = "B575681C-AD00-49E9-B85E-82F738439CBF",
                            CategoryId = 4,
                            IsDeleted = false,
                            Name = "Từ điển Hán Việt"
                        },
                        new
                        {
                            Id = "B4A8198D-CE3E-49E4-A476-F7F2C4681B0D",
                            CategoryId = 5,
                            IsDeleted = false,
                            Name = "Đất rừng phương nam"
                        },
                        new
                        {
                            Id = "ABF7E859-5FBA-4C19-B842-B442062C8909",
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "Lược sử Trái Đất"
                        },
                        new
                        {
                            Id = "507C99E1-1586-43C1-8831-E7B499C08EE0",
                            CategoryId = 3,
                            IsDeleted = false,
                            Name = "Sapien lược sử loài người"
                        },
                        new
                        {
                            Id = "3ECC8999-CAEA-4C31-9A0E-37FF9158427E",
                            CategoryId = 6,
                            IsDeleted = false,
                            Name = "Đảm bảo chất lượng phần mềm"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookAuthor", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            AuthorId = "A001",
                            BookId = "0E9B5F1B-0C7B-4093-9559-D3A7FE380832"
                        },
                        new
                        {
                            AuthorId = "A003",
                            BookId = "3ECC8999-CAEA-4C31-9A0E-37FF9158427E"
                        },
                        new
                        {
                            AuthorId = "A004",
                            BookId = "3ECC8999-CAEA-4C31-9A0E-37FF9158427E"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublishedBookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublishedBookId");

                    b.ToTable("BookDetails");

                    b.HasData(
                        new
                        {
                            Id = "da4b76e3-2d86-4f50-ab6e-c93a73d10e0e",
                            Code = "BD20240306202611",
                            IsAvailable = false,
                            IsDeleted = false,
                            PublishedBookId = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646",
                            Status = 0
                        },
                        new
                        {
                            Id = "4c0dc5ae-c609-4f5b-88eb-f8b81ab59439",
                            Code = "BD20240306202612",
                            IsAvailable = false,
                            IsDeleted = false,
                            PublishedBookId = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646",
                            Status = 0
                        },
                        new
                        {
                            Id = "eb7eae5e-c665-4635-aeb0-b05398f9ca87",
                            Code = "BD20240306202613",
                            IsAvailable = false,
                            IsDeleted = false,
                            PublishedBookId = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646",
                            Status = 0
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApprovedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookCheckoutId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookDetailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BorrowedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CanceledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExtendedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RejectedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookDetailId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("BookRequests");

                    b.HasData(
                        new
                        {
                            Id = "1406E765-B3C6-4FC3-A25F-2154E7EAC5DB",
                            BookDetailId = "da4b76e3-2d86-4f50-ab6e-c93a73d10e0e",
                            Code = "BR20240501222053",
                            IsDeleted = false,
                            Status = 3,
                            UserAccountId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookShelf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BookShelves");

                    b.HasData(
                        new
                        {
                            Id = "aedab447-dd1f-4dad-becf-aa74ed03fe7b",
                            IsDeleted = false,
                            Name = "SH-001-A"
                        },
                        new
                        {
                            Id = "8a509337-277f-4c0d-94d8-e693ccf58a96",
                            IsDeleted = false,
                            Name = "SH-001-B"
                        },
                        new
                        {
                            Id = "da29aa39-bfca-4405-b8fe-b21ee816f404",
                            IsDeleted = false,
                            Name = "SH-002-A"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookShelfDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookShelfId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublishedBookId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookShelfId");

                    b.HasIndex("PublishedBookId");

                    b.ToTable("BookShelfDetails");

                    b.HasData(
                        new
                        {
                            Id = "c5103159-813c-48a5-b5b0-b3d12185fb10",
                            BookShelfId = "aedab447-dd1f-4dad-becf-aa74ed03fe7b",
                            IsDeleted = false,
                            PublishedBookId = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646"
                        },
                        new
                        {
                            Id = "e6ef33c8-e912-43ef-af95-03b07bc4f2e9",
                            BookShelfId = "8a509337-277f-4c0d-94d8-e693ccf58a96",
                            IsDeleted = false,
                            PublishedBookId = "FB51AB25-2788-4B0E-996E-2A68282B2C88"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(3284));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(3554));

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Tiểu thuyết"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Sách tâm lý"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Sách khoa học"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Từ điển"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Sách văn học"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Giáo trình"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(5474));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = "BF001",
                            Content = "Test",
                            CreatedDate = new DateTime(2024, 5, 1, 22, 20, 53, 641, DateTimeKind.Local).AddTicks(7053),
                            UserAccountId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 1, 22, 20, 53, 626, DateTimeKind.Local).AddTicks(6696));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PublishedBookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PublishedBookId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("FeedBacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Test",
                            CreatedDate = new DateTime(2024, 5, 1, 22, 20, 53, 641, DateTimeKind.Local).AddTicks(7075),
                            PublishedBookId = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646",
                            Rate = 5.0,
                            UserAccountId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.PublishedBook", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Checkout_visit")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("default.png");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int?>("PublishedYear")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublishedBooks");

                    b.HasData(
                        new
                        {
                            Id = "7F33BDA5-7C2B-447A-89E3-DC670ACC3646",
                            BookId = "0E9B5F1B-0C7B-4093-9559-D3A7FE380832",
                            Checkout_visit = 1,
                            Code = "PB20240501222053",
                            Image = "1.png",
                            Pages = 404,
                            PublishedYear = 2020,
                            PublisherId = "A1D207B4-F571-4447-8FE0-E00B2F2D2724",
                            Rating = 4.2999999999999998
                        },
                        new
                        {
                            Id = "FB51AB25-2788-4B0E-996E-2A68282B2C88",
                            BookId = "3ECC8999-CAEA-4C31-9A0E-37FF9158427E",
                            Checkout_visit = 1,
                            Code = "PB20240501222053",
                            Image = "giaotrinhdbclpm.png",
                            Pages = 312,
                            PublishedYear = 2012,
                            PublisherId = "E1B5B1AB-69C9-4D5A-8148-3823605D855A",
                            Rating = 2.2999999999999998
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = "4D9FF82E-2B49-47D8-B5ED-43FEE479883D",
                            Name = "Nhà xuất bản Kim Đồng"
                        },
                        new
                        {
                            Id = "B1049AEC-30EA-4C8C-8DCC-D35F3AC17C90",
                            Name = "Nhà xuất bản Trẻ"
                        },
                        new
                        {
                            Id = "1712E51B-0E16-41AC-8CC4-28BCDFCA9A98",
                            Name = "Nhà xuất bản Tổng hợp thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            Id = "1E81F92D-2DB9-44CA-99B4-980B51D1E0C7",
                            Name = "Nhà xuất bản Trường Đại học Cần Thơ"
                        },
                        new
                        {
                            Id = "F28F2290-EE06-4831-9091-8124FE61DFB9",
                            Name = "Nhà xuất bản Lao động"
                        },
                        new
                        {
                            Id = "A1D207B4-F571-4447-8FE0-E00B2F2D2724",
                            Name = "Nhà xuất bản Hội Nhà Văn"
                        },
                        new
                        {
                            Id = "E1B5B1AB-69C9-4D5A-8148-3823605D855A",
                            Name = "Nhà xuất bản Đại học Cần Thơ"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "3A1C8B8E-33AB-4DB7-826F-D58C8DF82C88",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Lập trình",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "D2AB6BB4-0A82-4D2C-B70E-03DD1C3BE23D",
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Phỏng vấn",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8A820ADB-93D7-4C6F-9404-BDBFC14419F4",
                            Address = "Đường 3/2, phường Xuân Khánh, quận Ninh Kiều, TP. Cần Thơ",
                            Name = "Lê Minh Kha",
                            PhoneNumber = "0398897634",
                            UserCode = "B2012213"
                        },
                        new
                        {
                            Id = "BEFE5A8F-B2F6-48C4-AAA0-E4DDA7A3914C",
                            Address = "87 Lê Văn Huân, Phường 13, Quận Tân Bình, TP. Hồ Chí Minh",
                            Name = "Nguyễn Tùng Lâm",
                            PhoneNumber = "0338307449",
                            UserCode = "B1809363"
                        },
                        new
                        {
                            Id = "F7AA67C1-B3CB-4CCE-9394-1630407343BF",
                            Address = "Ninh Kiều, TP. Cần Thơ",
                            Name = "Trần Chí Thể",
                            PhoneNumber = "1234567890",
                            UserCode = "B2003923"
                        },
                        new
                        {
                            Id = "1B1BC693-F841-4B2D-9567-63710DA34F1D",
                            Address = "Cái Răng, TP. Cần Thơ",
                            Name = "Lưu Hoàng Lỉnh",
                            PhoneNumber = "0123456789",
                            UserCode = "B2012223"
                        },
                        new
                        {
                            Id = "D8E5F8D4-09DE-42FA-9952-37AF9BF3EE9B",
                            Address = "Hẻm 51, TP. Cần Thơ",
                            Name = "Nguyễn Trung Nhẩn",
                            PhoneNumber = "0122334455",
                            UserCode = "B2012237"
                        },
                        new
                        {
                            Id = "B03DE8D3-DFD7-4A25-B081-20FB1696DB22",
                            Address = "Ký túc xá A, Trường Đại học Cần Thơ",
                            Name = "Huỳnh Yến Nhung",
                            PhoneNumber = "098769876",
                            UserCode = "B1914237"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("avatar-default.png");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2409dbd-ae12-453b-942d-bbbcde28f8d1",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KHA@GMAIL.COM",
                            NormalizedUserName = "KHA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnw32G1041apBLD6NWxfQDYQ7/p6UwovNq52dQJMsXF2cbZv+/cN/6eo2R65j8jpw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "8A820ADB-93D7-4C6F-9404-BDBFC14419F4",
                            UserName = "kha@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e50f509-d9f6-4e29-ba33-574d94a4b1b7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOE5RBB98c/5vqxsug0ypPFwj3NRRtVy+a1FwUvka5pJSPoEIIJqE8U7A/6rLKcb+w==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("f5aa72ea-a563-4e89-a289-e290814f3c17"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67947507-766f-474c-b261-cc34b464a643",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LAM@GMAIL.COM",
                            NormalizedUserName = "LAM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIM3tQIvFdNVqiT/XAJaIhILRFZ+Bg113f6Mks4am3mBP7cqXiaP+bTXiNgOI/htzg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "BEFE5A8F-B2F6-48C4-AAA0-E4DDA7A3914C",
                            UserName = "lam@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("f4e9077d-d904-4c9e-860e-7c0373cfddff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75d0ed3c-b7ac-46ff-ac02-ebfbbc123d34",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THE@GMAIL.COM",
                            NormalizedUserName = "THE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKvu/AEeqh7sxggo7/RzkzWn02ZwE4U01wE4674KWT8c3D+ZGB6kbipJaG6niNmCzQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "F7AA67C1-B3CB-4CCE-9394-1630407343BF",
                            UserName = "the@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("5bb18865-b42e-4ef0-844f-9ac649ab1732"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaa58219-6ac3-4fe8-a6a3-41b41fd4a6af",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LINH@GMAIL.COM",
                            NormalizedUserName = "LINH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBWH8IbuT37hNGaIzv3eVchKcFD8nXBDX2fYERjA9JUCq5XDN1CxNU5+8UT4DHFM3w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "1B1BC693-F841-4B2D-9567-63710DA34F1D",
                            UserName = "linh@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d1f58d0a-78fc-4564-8642-3b63d71763ac"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96304850-bf02-45c0-af97-8fe5ed3f1c35",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NHAN@GMAIL.COM",
                            NormalizedUserName = "NHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJIg2YL/PqFs/eP8bRBOLZnuXUU05kqtwa7uJE8pHvMzpYQHZFgvW7zkiA2wToEalQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "D8E5F8D4-09DE-42FA-9952-37AF9BF3EE9B",
                            UserName = "nhan@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("5b01ec43-afdc-4117-8212-fe47feb3a5f4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3d513a8-403b-4120-a9a6-3798c874b872",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NHUNG@GMAIL.COM",
                            NormalizedUserName = "NHUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEG9CsLuQmQWY3Np/NtOn07SM8Jk1PplYMwKgJU5pD5pudxCvqBWoFguHr1UuveJYuQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserId = "B03DE8D3-DFD7-4A25-B081-20FB1696DB22",
                            UserName = "nhung@gmail.com"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22"),
                            ConcurrencyStamp = "31c4d1c4-f999-4011-b21b-cb3620390e3c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31"),
                            ConcurrencyStamp = "59bcc293-8a3c-4a64-ad29-8608b8c1988a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "id",
                            ClaimValue = "372ea575-2536-4076-9bab-3e3138de495f",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "email",
                            ClaimValue = "admin@gmail.com",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "roles",
                            ClaimValue = "Admin",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "id",
                            ClaimValue = "2a738bf3-a14b-488e-b04e-17f918e8d6a4",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "email",
                            ClaimValue = "kha@gmail.com",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "id",
                            ClaimValue = "f5aa72ea-a563-4e89-a289-e290814f3c17",
                            UserId = new Guid("f5aa72ea-a563-4e89-a289-e290814f3c17")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "email",
                            ClaimValue = "lam@gmail.com",
                            UserId = new Guid("f5aa72ea-a563-4e89-a289-e290814f3c17")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("f5aa72ea-a563-4e89-a289-e290814f3c17")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "id",
                            ClaimValue = "f4e9077d-d904-4c9e-860e-7c0373cfddff",
                            UserId = new Guid("f4e9077d-d904-4c9e-860e-7c0373cfddff")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "email",
                            ClaimValue = "the@gmail.com",
                            UserId = new Guid("f4e9077d-d904-4c9e-860e-7c0373cfddff")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("f4e9077d-d904-4c9e-860e-7c0373cfddff")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "id",
                            ClaimValue = "5bb18865-b42e-4ef0-844f-9ac649ab1732",
                            UserId = new Guid("5bb18865-b42e-4ef0-844f-9ac649ab1732")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "email",
                            ClaimValue = "linh@gmail.com",
                            UserId = new Guid("5bb18865-b42e-4ef0-844f-9ac649ab1732")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("5bb18865-b42e-4ef0-844f-9ac649ab1732")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "id",
                            ClaimValue = "d1f58d0a-78fc-4564-8642-3b63d71763ac",
                            UserId = new Guid("d1f58d0a-78fc-4564-8642-3b63d71763ac")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "email",
                            ClaimValue = "nhan@gmail.com",
                            UserId = new Guid("d1f58d0a-78fc-4564-8642-3b63d71763ac")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("d1f58d0a-78fc-4564-8642-3b63d71763ac")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "id",
                            ClaimValue = "d1f58d0a-78fc-4564-8642-3b63d71763ac",
                            UserId = new Guid("5b01ec43-afdc-4117-8212-fe47feb3a5f4")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "email",
                            ClaimValue = "nhung@gmail.com",
                            UserId = new Guid("5b01ec43-afdc-4117-8212-fe47feb3a5f4")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("5b01ec43-afdc-4117-8212-fe47feb3a5f4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            RoleId = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22")
                        },
                        new
                        {
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        },
                        new
                        {
                            UserId = new Guid("f5aa72ea-a563-4e89-a289-e290814f3c17"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        },
                        new
                        {
                            UserId = new Guid("f4e9077d-d904-4c9e-860e-7c0373cfddff"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Blog", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Topic", null)
                        .WithMany("Blogs")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Blogs")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookDetail", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.PublishedBook", "PublishedBook")
                        .WithMany("BookDetails")
                        .HasForeignKey("PublishedBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishedBook");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookRequest", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.BookDetail", "BookDetail")
                        .WithMany("BookRequests")
                        .HasForeignKey("BookDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.UserAccount", "UserAccount")
                        .WithMany("BookRequests")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookDetail");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookShelfDetail", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.BookShelf", "BookShelf")
                        .WithMany()
                        .HasForeignKey("BookShelfId");

                    b.HasOne("LibraryManagement.Data.Models.PublishedBook", "PublishedBook")
                        .WithMany("BookShelfDetails")
                        .HasForeignKey("PublishedBookId");

                    b.Navigation("BookShelf");

                    b.Navigation("PublishedBook");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Comment", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId");

                    b.HasOne("LibraryManagement.Data.Models.UserAccount", "UserAccount")
                        .WithMany("Comments")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.FeedBack", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.PublishedBook", "PublishedBook")
                        .WithMany("FeedBacks")
                        .HasForeignKey("PublishedBookId");

                    b.HasOne("LibraryManagement.Data.Models.UserAccount", "UserAccount")
                        .WithMany("FeedBacks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishedBook");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.PublishedBook", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.Book", "Book")
                        .WithMany("PublishedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.Publisher", "Publisher")
                        .WithMany("PublishedBooks")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.UserAccount", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.User", "User")
                        .WithOne("UserAccount")
                        .HasForeignKey("LibraryManagement.Data.Models.UserAccount", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Data.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagement.Data.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("PublishedBooks");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.BookDetail", b =>
                {
                    b.Navigation("BookRequests");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.PublishedBook", b =>
                {
                    b.Navigation("BookDetails");

                    b.Navigation("BookShelfDetails");

                    b.Navigation("FeedBacks");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Publisher", b =>
                {
                    b.Navigation("PublishedBooks");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.Topic", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.User", b =>
                {
                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("LibraryManagement.Data.Models.UserAccount", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BookRequests");

                    b.Navigation("Comments");

                    b.Navigation("FeedBacks");
                });
#pragma warning restore 612, 618
        }
    }
}
